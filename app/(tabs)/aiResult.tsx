import React from 'react';
import { ScrollView, StyleSheet, Text, View, Button, Alert, Pressable } from 'react-native';
import { Colors, Typography, Spacing } from '@/constants/Styles';

interface AIResult {
  summary: string;
  keywords: string[];
  definitions: { [key: string]: string };
}

const dummyData: AIResult = {
  summary: "This is a dummy summary generated by the AI. It explains the main points of the text in a concise manner.",
  keywords: ["keyword1", "keyword2", "keyword3", "concept1", "concept2"],
  definitions: {
    "keyword1": "Definition for keyword1.",
    "keyword2": "Definition for keyword2.",
    "concept1": "Definition for concept1.",
  },
};

const AIResultScreen: React.FC = () => {
 const { summary, keywords, definitions } = dummyData;

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>AI Analysis</Text>

      <Text style={styles.subtitle}>Summary</Text>
 <Text style={styles.bodyText}>{summary}</Text>

      <Text style={styles.subtitle}>Keywords</Text>
      <View style={styles.keywordsContainer}>
        {keywords.map((keyword, index) => (
          <Text key={index} style={styles.keywordChip}>
            {keyword}
          </Text>
        ))}
      </View>

      <Text style={styles.subtitle}>Definitions</Text>
      {Object.entries(definitions).map(([term, definition], index) => (
        <View key={index} style={styles.definitionItem}>
          <Text style={styles.definitionTerm}>{term}: </Text>
 <Text style={styles.bodyText}>{definition}</Text>
        </View>
      ))}

 <Pressable style={styles.askAIButton} onPress={() => Alert.alert('Ask AI clicked')}>
 <Text style={styles.askAIButtonText}>Ask AI</Text>
 </Pressable>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: Spacing.medium,
    backgroundColor: Colors.background,
  },
  title: {
    ...Typography.title,
 marginBottom: Spacing.medium,
    textAlign: 'center',
 color: Colors.text,
  },
  subtitle: {
    ...Typography.subtitle,
 marginTop: Spacing.medium,
 marginBottom: Spacing.small,
 color: Colors.text,
  },
 bodyText: {
    ...Typography.body,
 marginBottom: Spacing.small,
 color: Colors.text,
  },
  keywordsContainer: {
 flexDirection: 'row',
 flexWrap: 'wrap',
 marginBottom: Spacing.medium,
  },
  keywordsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 10,
  },
  keyword: {
 keywordChip: {
 backgroundColor: Colors.secondary,
 paddingVertical: Spacing.extraSmall,
 paddingHorizontal: Spacing.small,
 margin: Spacing.extraSmall,
 borderRadius: 20,
 color: Colors.text,
  },
 definitionItem: {
 flexDirection: 'row',
 marginBottom: Spacing.small,
  },
  definitionTerm: {
    fontWeight: 'bold',
 color: Colors.text,
  },
  askAIButton: {
 backgroundColor: Colors.primary,
 padding: Spacing.medium,
 borderRadius: Spacing.small,
 alignItems: 'center',
 marginTop: Spacing.large,
  },
  askAIButton: {
    marginTop: 20,
    marginBottom: 10,
  },
});

export default AIResultScreen;